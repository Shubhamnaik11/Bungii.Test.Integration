#parse("/array.java.vm")
#if ($packageName)
//package $packageName;

#end##
package com.bungii;

import com.bungii.SetupManager;
import cucumber.api.CucumberOptions;
import cucumber.api.testng.AbstractTestNGCucumberTests;
import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import com.bungii.hooks.CucumberHooks;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;
import java.io.IOException;

@CucumberOptions(
        strict = $strict,
        features = {"$featureFile"},
        plugin ={"com.bungii.common.utilities.CustomFormatter"},
        monochrome = ${monochrome},
#if(!$featureFile.contains(".feature:") && $tags)
        tags = #stringArray($tags),
#end
        glue = #stringArray($glue))
public class $className extends AbstractTestNGCucumberTests {
	private static final String RUN_CONFIG_PROPERTIES = "/profile.properties";

	CucumberHooks hooks;
	/*public $className(){
		this.hooks= new Hooks();
	}*/
	
	  @Parameters({"test.Device","test.Platform","test.Environment","test.Category"})
	public $className(@Optional("device1") String device, @Optional("web") String Platform, @Optional("QA") String environment, @Optional("sanity") String category){
		String ClassName =this.getClass().getSimpleName();
 if(Platform =="ios" || Platform=="android") {
		String[]deviceList = device.split(",");
		if(deviceList.length>1){
			int threadNumber = Integer.parseInt(ClassName.substring(8,10));		

		System.err.println("DEVICE is "+device+" deviceTo be consider "+deviceList[threadNumber-1]);
		System.setProperty("DEVICE",deviceList[threadNumber-1]);}
		else{
			System.setProperty("DEVICE",device);

		}
		}
		 Properties props = new Properties();

                String propsFileName = "./src/main/resources/UserProperties/config.properties";
                try {
                    //first load old one:
                    FileInputStream configStream = new FileInputStream(propsFileName);
                    props.load(configStream);
                    configStream.close();

                    //modifies existing or adds new property
                    props.setProperty("target.platform", Platform);
                    props.setProperty("environment", environment);

                    //save modified property file
                    FileOutputStream output = new FileOutputStream(propsFileName);
                    props.store(output, "");
                    output.close();

                } catch (IOException ex) {
                    ex.printStackTrace();
                }

				System.setProperty("runner.class",ClassName);
		
		this.hooks= new CucumberHooks();
	}
	
    @Parameters("NameWithtimestamp")
 	@BeforeSuite
 	public void start(@Optional("") String resultFolder){
 		
 		this.hooks.start(resultFolder);
 	}
    @AfterSuite
    public  void afterSuite() throws IOException {
    	this.hooks.tearDown();
    }
	}