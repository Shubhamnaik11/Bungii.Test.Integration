#parse("/array.java.vm")
#if ($packageName)
//package $packageName;

#end##
package com.bungii;

import com.bungii.SetupManager;
import cucumber.api.CucumberOptions;
import cucumber.api.testng.AbstractTestNGCucumberTests;
import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import com.bungii.hooks.CucumberHooks;

import java.io.IOException;

@CucumberOptions(
        strict = $strict,
        features = {"$featureFile"},
        plugin = #stringArray($plugins),
        monochrome = ${monochrome},
#if(!$featureFile.contains(".feature:") && $tags)
        tags = #stringArray($tags),
#end
        glue = #stringArray($glue))
public class $className extends AbstractTestNGCucumberTests {
	private static final String RUN_CONFIG_PROPERTIES = "/profile.properties";

	CucumberHooks hooks;
	/*public $className(){
		this.hooks= new Hooks();
	}*/
	
	    @Parameters("test.Device")
	public $className(@Optional("device1") String device){
		String ClassName =this.getClass().getSimpleName();

		String[]deviceList = device.split(",");
		if(deviceList.length>1){
			int threadNumber = Integer.parseInt(ClassName.substring(8,10));		

		System.err.println("DEVICE is "+device+"deviceTo be consider"+deviceList[threadNumber-1]);
		System.setProperty("DEVICE",deviceList[threadNumber-1]);}
		else{
			System.setProperty("DEVICE",device);

		}
				System.setProperty("runner.class",ClassName);
		
		this.hooks= new CucumberHooks();
	}
	
    @Parameters("NameWithtimestamp")
 	@BeforeSuite
 	public void start(@Optional("") String resultFolder){
 		
 		this.hooks.start(resultFolder);
 	}
    @AfterSuite
    public  void afterSuite() throws IOException {
    	this.hooks.tearDown();
    }
	}